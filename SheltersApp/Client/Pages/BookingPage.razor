@page "/Booking"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using SheltersApp.Shared.Model;
@using BlazorDateRangePicker;

<h3>Opret Booking</h3>

<EditForm Model="newBooking" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Tilføjer Shelters dropdown menu -->
    <div class="form-group">
        <label for="shelters" class="bold-label">Choose Shelter:</label>
        <select @bind="SelectedShelterName" @bind:event="onchange" class="form-control">
            @foreach (var shelter in shelters)
            {
                <option value="@shelter.Navn">@shelter.Navn</option>
            }
        </select>
    </div>
    <!-- Vis lang_beskr for det valgte shelter her -->
    <div class="form-group">
        <label for="shelterDescription" class="bold-label">Beskrivelse:</label>
        <p id="shelterDescription" class="form-control-plaintext">@selectedShelterDescription</p>
    </div>
    <!-- Vis Booking ID her -->
    <div class="form-group">
        <label for="bookingID" class="bold-label">Booking ID:</label>
        <p id="bookingID" class="form-control-plaintext">@newBooking.BookingID</p>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <!-- Vis Navn her -->
                    <label for="name" class="bold-label">Navn:</label>
                    <InputText id="name" class="form-control" @bind-Value="newBooking.Name" />
                </div>
                <!--  Vis Telefonnr her-->
                <div class="form-group">
                    <label for="telefonnr" class="bold-label">Telefonnr:</label>
                    <InputText id="telefonnr" class="form-control" @bind-Value="newBooking.Telefonnr" />
                </div>
            </div>
            <!-- Date Range Picker -->
            <div class="col-md-6">
                <div class="form-group">
                    <label class="bold-label">Vælg Datoer:</label>
                    <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" />
                </div>
            </div>
        </div>
    </div>

    <!-- Opret Booking knap -->
    <button type="submit" class="btn btn-primary">Opret Booking</button>

</EditForm>

@code {
    // Date Range Picker
    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);

    private List<Shelter> shelters = new List<Shelter>();
    Booking newBooking = new Booking
    {
        BookingID = "",
        Name = "",
        Telefonnr = "",
        ShelterName = "",
        StartDate = null,
        EndDate = null
    };
    private string selectedShelterDescription;

    // Property til at binde det valgte shelter navn og opdatere beskrivelsen
    private string SelectedShelterName
    {
        get => newBooking.ShelterName;
        set
        {
            if (newBooking.ShelterName != value)
            {
                newBooking.ShelterName = value;
                OnShelterSelected(value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        shelters = await Http.GetFromJsonAsync<List<Shelter>>("api/shelterSIU");

        // Sørger for, at vise beskrivelse for det først viste shelter, når programmet åbnes
        if (shelters.Any())
        {
            var firstShelter = shelters.First();
            SelectedShelterName = firstShelter.Navn; // Dette vil også sætte selectedShelterDescription
        }
        GenerateRandomBookingId(); // Sæt et nyt random BookingID før hver indsendelse
    }
    // Generer et random tal mellem
    private void GenerateRandomBookingId()
    {
        Random rnd = new Random();
        newBooking.BookingID = rnd.Next(1000, 10000).ToString(); // Genererer et tal mellem 1000 og 9999
    }

    // Metode for, når man trykker på shelter i dropdown at det vises i beskrivelses cellen forneden
    private void OnShelterSelected(string shelterName)
    {
        GenerateRandomBookingId(); // Sæt et nyt random BookingID før hver indsendelse
        var selectedShelter = shelters.FirstOrDefault(s => s.Navn == shelterName);
        selectedShelterDescription = selectedShelter.Lang_beskr;
    }

    // Metode for til
    private async Task HandleValidSubmit()
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            // Formaterer StartDate og EndDate som strengværdier, der kun indeholder datoen
            var formattedStartDate = StartDate.Value.ToString("yyyy-MM-dd");
            var formattedEndDate = EndDate.Value.ToString("yyyy-MM-dd");

            // Konstruerer en ny BookingDTO (eller lignende objekt) til at sende data
            var bookingDto = new
            {
                BookingID = newBooking.BookingID,
                Name = newBooking.Name,
                Telefonnr = newBooking.Telefonnr,
                ShelterName = newBooking.ShelterName,
                StartDate = formattedStartDate,
                EndDate = formattedEndDate
            };

            // Sender den nye DTO i stedet for newBooking objektet
            var response = await Http.PostAsJsonAsync("api/bookings", bookingDto);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/BookingList");
            }
            else
            {
                // Håndter fejl, f.eks. ved at vise en fejlmeddelelse til brugeren
            }
        }
    }
}
